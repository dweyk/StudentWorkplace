// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudentWorkplace.Data;

#nullable disable

namespace StudentWorkplace.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240523182225_InitialDataBase")]
    partial class InitialDataBase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("MySql:CharSet", "utf8mb4")
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ScheduleUser", b =>
                {
                    b.Property<int>("SchedulesSсheduleId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("integer");

                    b.HasKey("SchedulesSсheduleId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("ScheduleUser");
                });

            modelBuilder.Entity("StudentWorkplace.Data.Entities.Lecture", b =>
                {
                    b.Property<int>("LectureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("LectureId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LectureId"));

                    b.Property<string>("Content")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("LectureId")
                        .HasName("PRIMARY");

                    b.ToTable("lecture", (string)null);
                });

            modelBuilder.Entity("StudentWorkplace.Data.Entities.PassedQuestion", b =>
                {
                    b.Property<int>("PassedQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("PassedQuestionId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PassedQuestionId"));

                    b.Property<bool>("IsCorrectAnswer")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("PassedQuestionId")
                        .HasName("PRIMARY");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("passed_question", (string)null);
                });

            modelBuilder.Entity("StudentWorkplace.Data.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("QuestionId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TestTopic")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.HasKey("QuestionId")
                        .HasName("PRIMARY");

                    b.ToTable("question", (string)null);
                });

            modelBuilder.Entity("StudentWorkplace.Data.Entities.Reminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ReminderId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReminderId"));

                    b.Property<string>("ReminderMessage")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("integer");

                    b.HasKey("ReminderId")
                        .HasName("PRIMARY");

                    b.HasIndex("ScheduleId");

                    b.ToTable("reminder", (string)null);
                });

            modelBuilder.Entity("StudentWorkplace.Data.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("RoleID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("RoleId")
                        .HasName("PRIMARY");

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Student"
                        });
                });

            modelBuilder.Entity("StudentWorkplace.Data.Entities.Schedule", b =>
                {
                    b.Property<int>("SсheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SсheduleId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SсheduleId"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReminderId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("SсheduleId")
                        .HasName("PRIMARY");

                    b.ToTable("schedule", (string)null);
                });

            modelBuilder.Entity("StudentWorkplace.Data.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("UserID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("UserLogin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserPatronymic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<string>("UserSurname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserRole" }, "conn__User");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            UserLogin = "admin",
                            UserName = "admin",
                            UserPassword = "admin",
                            UserPatronymic = "admin",
                            UserRole = 1,
                            UserSurname = "admin"
                        });
                });

            modelBuilder.Entity("StudentWorkplace.Data.Entities.VideoLecture", b =>
                {
                    b.Property<int>("VideoLectureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("VideoId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VideoLectureId"));

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("VideoLectureId")
                        .HasName("PRIMARY");

                    b.ToTable("video_lectures", (string)null);
                });

            modelBuilder.Entity("ScheduleUser", b =>
                {
                    b.HasOne("StudentWorkplace.Data.Entities.Schedule", null)
                        .WithMany()
                        .HasForeignKey("SchedulesSсheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentWorkplace.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentWorkplace.Data.Entities.PassedQuestion", b =>
                {
                    b.HasOne("StudentWorkplace.Data.Entities.Question", "Question")
                        .WithMany("PassedQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("passedQuestion__question");

                    b.HasOne("StudentWorkplace.Data.Entities.User", "User")
                        .WithMany("PassedQuestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("passedQuestion__user");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentWorkplace.Data.Entities.Reminder", b =>
                {
                    b.HasOne("StudentWorkplace.Data.Entities.Schedule", "Schedule")
                        .WithMany("Reminders")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("schedule__reminder");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("StudentWorkplace.Data.Entities.User", b =>
                {
                    b.HasOne("StudentWorkplace.Data.Entities.Role", "UserRoleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("UserRole")
                        .IsRequired()
                        .HasConstraintName("conn__User");

                    b.Navigation("UserRoleNavigation");
                });

            modelBuilder.Entity("StudentWorkplace.Data.Entities.Question", b =>
                {
                    b.Navigation("PassedQuestions");
                });

            modelBuilder.Entity("StudentWorkplace.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("StudentWorkplace.Data.Entities.Schedule", b =>
                {
                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("StudentWorkplace.Data.Entities.User", b =>
                {
                    b.Navigation("PassedQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
